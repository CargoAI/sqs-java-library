plugins {
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
    id 'maven-publish'
    id 'net.researchgate.release' version '3.0.2'
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    version = '0.0.33-SNAPSHOT'
    sourceCompatibility = '17'
    targetCompatibility = '17'

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:3.4.0")
        }
    }

    // common dependencies for all modules
    dependencies {

        // Spring Boot's testing dependencies
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // annotation processor to create configuration metadata
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
    }

    javadoc.failOnError = false
    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    test {
        useJUnitPlatform {
            if(System.getProperty("ci") != null){
                excludeTags "IgnoreInCi"
            }
        }
        systemProperty "aws.accessKeyId", "foo" // dummy AWS credentials because the AWS SDK complains otherwise
        systemProperty "aws.secretKey", "foo"   // dummy AWS credentials because the AWS SDK complains otherwise
    }

    test.finalizedBy jacocoTestReport
}
